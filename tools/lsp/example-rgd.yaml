apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: web-application
  namespace: default
spec:
  schema:
    kind: WebApplication
    apiVersion: v1alpha1
    spec:
      name: string | required=true
      replicas: integer | default=1 | min=1 | max=10
      image: string | required=true
      port: integer | default=8080
      ingress:
        enabled: boolean | default=false
        host: string
  resources:
    - id: deployment
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: "{{ .spec.name }}"
          namespace: "{{ .metadata.namespace }}"
        spec:
          replicas: "{{ .spec.replicas }}"
          selector:
            matchLabels:
              app: "{{ .spec.name }}"
          template:
            metadata:
              labels:
                app: "{{ .spec.name }}"
            spec:
              containers:
                - name: app
                  image: "{{ .spec.image }}"
                  ports:
                    - containerPort: "{{ .spec.port }}"
                  # This will cause a validation error - invalid resource limit format
                  resources:
                    limits:
                      memory: "invalid-memory-format"
                      cpu: "not-a-valid-cpu"

    - id: service
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: "{{ .spec.name }}-service"
          namespace: "{{ .metadata.namespace }}"
        spec:
          selector:
            app: "{{ .spec.name }}"
          ports:
            - port: 80
              targetPort: "{{ .spec.port }}"
          type: ClusterIP

    # This resource has an invalid GVK - should trigger CRD validation warning
    - id: custom-resource
      template:
        apiVersion: example.com/v1
        kind: NonExistentResource
        metadata:
          name: "{{ .spec.name }}-custom"
        spec:
          someField: "{{ .spec.name }}"

    # This resource is missing required ID field
    - template:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: "{{ .spec.name }}-config"
        data:
          config.yaml: |
            name: "{{ .spec.name }}"
            port: "{{ .spec.port }}"
